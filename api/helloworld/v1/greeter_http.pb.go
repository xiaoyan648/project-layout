// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.9
// source: helloworld/v1/greeter.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the panda package it is being compiled against.
import (
	"context"
	"github.com/gin-gonic/gin"
	httpserver "github.com/go-leo/leo/runner/net/http/server"
	"github.com/xiaoyan648/project-layout/pkg/errors"
)

type Greeter interface {
	// Desc: Sends a greeting
	// Errorcode: 10011 10012
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func GreeterAPIRouters(ctr Greeter) []httpserver.Router {
	return []httpserver.Router{
		{
			HTTPMethod:   "GET",
			Path:         "/helloworld",
			HandlerFuncs: []gin.HandlerFunc{_SayHelloHandler(ctr)},
		},
	}
}

func _SayHelloHandler(ctr Greeter) gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx := c.Request.Context()
		in := &HelloRequest{}
		if err := c.BindQuery(in); err != nil {
			c.JSON(400, err.Error())
			c.Abort()
			return
		}

		if v, ok := interface{}(in).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				c.JSON(400, err.Error())
				c.Abort()
				return
			}
		}

		reply, err := ctr.SayHello(ctx, in)
		if err != nil {
			coder := errors.ParseCoder(err)
			if coder.HTTPStatus() == 500 {
				c.JSON(500, coder)
			} else {
				c.JSON(200, coder)
			}
			return
		}

		c.JSON(200, reply)
	}
}
